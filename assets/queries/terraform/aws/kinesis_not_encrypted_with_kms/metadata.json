{
  "id": "862fe4bf-3eec-4767-a517-40f378886b88",
  "queryName": "Kinesis Not Encrypted With KMS",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "AWS Kinesis Streams and metadata should be protected with KMS",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream",
  "platform": "Terraform",
  "descriptionID": "e154bb5e",
  "cloudProvider": "aws",
  "cwe": "326",
  "detailedDescriptionText": "AWS Kinesis streams should always be encrypted using AWS Key Management Service (KMS) to protect sensitive data in transit and at rest. This vulnerability occurs when a Kinesis stream is configured with 'encryption_type' set to 'NONE' or when the attribute is omitted (as it defaults to 'NONE'), or when 'encryption_type' is set to 'KMS' but no 'kms_key_id' is specified.\n\nWhen Kinesis streams lack KMS encryption, all data that flows through the streams is unprotected, potentially exposing sensitive information to unauthorized access. Kinesis streams often handle large volumes of real-time data, which may include personal information, transaction details, log data, analytics, or other confidential information that requires proper protection.\n\nTo properly secure your Kinesis streams, always set 'encryption_type' to 'KMS' and specify a valid KMS key ID using the 'kms_key_id' attribute in your Terraform configuration. For enhanced security, consider using a customer-managed KMS key rather than the default AWS managed key ('alias/aws/kinesis'), as this gives you greater control over key rotation, access policies, and provides better auditability through AWS CloudTrail.\n\nImplementing KMS encryption for Kinesis streams is not only a security best practice but also essential for meeting compliance requirements such as GDPR, HIPAA, PCI DSS, and other regulatory standards that mandate the protection of sensitive data. The proper encryption of data streams helps maintain data confidentiality throughout the entire data processing pipeline and protects against data exposure if unauthorized access to the stream occurs."
}
