{
  "id": "2f737336-b18a-4602-8ea0-b200312e1ac1",
  "queryName": "RDS Associated with Public Subnet",
  "severity": "CRITICAL",
  "category": "Networking and Firewall",
  "descriptionText": "RDS should not run in public subnet",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#db_subnet_group_name",
  "platform": "Terraform",
  "descriptionID": "425d310e",
  "cloudProvider": "aws",
  "cwe": "200",
  "oldSeverity": "HIGH",
  "detailedDescriptionText": "Placing Amazon RDS database instances in public subnets creates a critical security vulnerability that significantly increases the risk of unauthorized access and potential data breaches. Database instances should always be isolated in private subnets with carefully controlled access paths.\n\nWhen an RDS instance is deployed in a public subnet (a subnet with an Internet Gateway attached and a route to 0.0.0.0/0), it's potentially accessible from the public internet, subject only to security group rules and network ACLs. This architecture violates the fundamental security principle of defense in depth and unnecessarily expands your attack surface.\n\nThe specific risks of placing RDS in public subnets include:\n\n1. Increased Exposure to Attacks: Even with security groups limiting access, the database remains visible to the internet, making it a target for port scanning, brute force attempts, and exploitation of zero-day vulnerabilities.\n\n2. Single Point of Failure: If a security group rule is misconfigured or accidentally modified to be too permissive, the database becomes directly accessible to attackers.\n\n3. Compliance Violations: Many compliance standards (PCI-DSS, HIPAA, etc.) explicitly require database systems to be isolated from direct internet access.\n\n4. Lateral Movement Risk: Compromised public-facing databases can serve as entry points for lateral movement into other parts of your AWS environment.\n\nTo properly secure RDS databases:\n1. Always place RDS instances in private subnets with no direct route to the internet\n2. Use a layered network architecture with application tiers in separate subnets\n3. Control database access through VPC endpoints, bastion hosts, or VPN connections\n4. Implement strict security groups that allow access only from necessary application subnets\n5. Enable enhanced network security features like Network Firewall and AWS PrivateLink where appropriate\n\nBy isolating your databases in private subnets, you significantly reduce your attack surface and create multiple layers of protection for your sensitive data."
}
