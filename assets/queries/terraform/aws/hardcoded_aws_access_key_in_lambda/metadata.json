{
  "id": "1402afd8-a95c-4e84-8b0b-6fb43758e6ce",
  "queryName": "Hardcoded AWS Access Key In Lambda",
  "severity": "HIGH",
  "category": "Secret Management",
  "descriptionText": "Lambda access/secret keys should not be hardcoded",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function",
  "platform": "Terraform",
  "descriptionID": "63935af4",
  "cloudProvider": "aws",
  "cwe": "798",
  "oldSeverity": "MEDIUM",
  "detailedDescriptionText": "AWS Lambda functions should never contain hardcoded AWS access keys or secret keys in environment variables or function code. This vulnerability occurs when AWS credentials are directly embedded in the Terraform configuration for Lambda environment variables, creating a significant security risk.\n\nHardcoded credentials in Lambda functions are particularly dangerous for several reasons. First, these credentials typically have unnecessary permissions beyond what the Lambda function requires, violating the principle of least privilege. Second, these credentials are often long-lived, increasing the risk window if they're compromised. Third, hardcoded credentials in Terraform configurations are likely to be committed to version control systems, potentially exposing them to unauthorized users or even making them publicly accessible in case of public repositories.\n\nTo properly secure AWS Lambda functions, never hardcode AWS access keys or secret keys in environment variables or function code. Instead, use IAM roles to grant the Lambda function the specific permissions it needs to interact with AWS resources. The Lambda execution role attached to the function provides temporary, automatically rotated credentials that are more secure than static, hardcoded credentials.\n\nIf your Lambda function absolutely requires access to external services that need explicit credentials, use AWS Secrets Manager or AWS Systems Manager Parameter Store to securely store and retrieve these credentials during function execution. This approach separates sensitive credentials from your code and infrastructure configuration, allows centralized management of secrets, implements proper access controls, and enables credential rotation without code changes."
}
