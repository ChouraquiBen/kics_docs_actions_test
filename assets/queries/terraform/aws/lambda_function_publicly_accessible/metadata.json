{
  "id": "1btsf2f9-af8c-4dfc-a0f1-a03adb70deb2",
  "queryName": "Lambda Function Publicly Accessible",
  "severity": "HIGH",
  "category": "Access Control",
  "descriptionText": "Lambda functions should not be publicly accessible.",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function",
  "platform": "Terraform",
  "descriptionID": "1btsf2f9",
  "cloudProvider": "aws",
  "cwe": "200",
  "detailedDescriptionText": "AWS Lambda functions should never be configured with permissions that allow public access. This vulnerability occurs when an 'aws_lambda_permission' resource is created with the 'principal' attribute set to '*', which grants any AWS account or anonymous user the ability to invoke the Lambda function.\n\nPublicly accessible Lambda functions create significant security risks, as they can be invoked by anyone with knowledge of the function's ARN. This could lead to unauthorized execution, potential denial of service attacks (by triggering the function repeatedly), excessive costs from unexpected invocations, or exploitation of vulnerabilities within the function code. Additionally, if the Lambda function processes sensitive data or has access to other AWS resources, unauthorized invocations could lead to data breaches or further privilege escalation.\n\nTo properly secure your Lambda functions, always restrict the 'principal' attribute in Lambda permission resources to specific AWS services, accounts, or IAM entities that need to invoke the function. Instead of using '*' as the principal, specify explicit ARNs for the AWS services (like 's3.amazonaws.com' or 'events.amazonaws.com') or specific AWS account IDs (like 'arn:aws:iam::123456789012:root') that require access.\n\nFor Lambda functions that need to be accessible via API Gateway, use API Gateway's authorization mechanisms (like IAM roles, Cognito User Pools, or Lambda authorizers) to control access rather than making the Lambda function itself publicly invocable. Additionally, implement appropriate input validation and error handling within your Lambda function code to mitigate potential security risks even if unauthorized access occurs."
}
