{
  "id": "ce089fd4-1406-47bd-8aad-c259772bb294",
  "queryName": "DynamoDB Table Not Encrypted",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "AWS DynamoDB Tables should have server-side encryption",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table#server_side_encryption",
  "platform": "Terraform",
  "descriptionID": "a4233398",
  "cloudProvider": "aws",
  "cwe": "311",
  "oldSeverity": "MEDIUM",
  "detailedDescriptionText": "AWS DynamoDB tables should always have server-side encryption enabled to protect sensitive data. This vulnerability occurs when a DynamoDB table is created without a 'server_side_encryption' block, or when the block is present but the 'enabled' attribute is set to false.\n\nWhen DynamoDB tables lack encryption, all stored data is vulnerable to unauthorized access if the underlying storage is compromised. DynamoDB often contains critical business data, personal information, authentication tokens, session data, and other sensitive information that could be exposed without proper encryption protection.\n\nTo properly secure your DynamoDB table, always include the 'server_side_encryption' block in your Terraform configuration with the 'enabled' attribute set to true. By default, DynamoDB will use AWS-owned keys for encryption, but for enhanced security and control, you can specify a customer-managed KMS key by including the 'kms_key_arn' attribute within the server-side encryption block.\n\nImplementing encryption for DynamoDB tables is not only a security best practice but also essential for meeting compliance requirements such as GDPR, HIPAA, PCI DSS, and other regulatory standards that mandate the protection of sensitive data. Additionally, enabling encryption has minimal performance impact and no additional cost when using AWS-owned keys, making it a simple yet effective security measure for protecting your NoSQL database contents."
}
