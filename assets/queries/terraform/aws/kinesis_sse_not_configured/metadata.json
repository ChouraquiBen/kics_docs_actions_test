{
  "id": "5c6dd5e7-1fe0-4cae-8f81-4c122717cef3",
  "queryName": "Kinesis SSE Not Configured",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "AWS Kinesis Server data at rest should have Server Side Encryption (SSE) enabled",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_firehose_delivery_stream#server_side_encryption",
  "platform": "Terraform",
  "descriptionID": "fce3b812",
  "cloudProvider": "aws",
  "cwe": "311",
  "detailedDescriptionText": "AWS Kinesis Firehose delivery streams should always be configured with server-side encryption (SSE) to protect data at rest. This vulnerability occurs when a Kinesis Firehose delivery stream is created without a 'server_side_encryption' block, or when the block is present but 'enabled' is set to false, or when 'enabled' is true but no proper key configuration is specified.\n\nWhen Kinesis Firehose delivery streams lack encryption, all data stored within the service is vulnerable to unauthorized access if the underlying storage is compromised. Firehose delivery streams often handle large volumes of streaming data that may contain sensitive information such as personal data, log data, metrics, or other confidential information that requires protection.\n\nTo properly secure your Kinesis Firehose delivery streams, always include the 'server_side_encryption' block with 'enabled' set to true in your Terraform configuration. Additionally, specify a key type using the 'key_type' attribute. For enhanced security, consider using 'CUSTOMER_MANAGED_CMK' with a specified 'key_arn' rather than the default 'AWS_OWNED_CMK', as this gives you greater control over key rotation, access policies, and provides better auditability through AWS CloudTrail.\n\nImplementing server-side encryption for Kinesis Firehose delivery streams is not only a security best practice but also essential for meeting compliance requirements such as GDPR, HIPAA, PCI DSS, and other regulatory standards that mandate the protection of sensitive data at rest. The proper encryption of these streams helps ensure the confidentiality and integrity of your data throughout its entire lifecycle in the AWS environment."
}
