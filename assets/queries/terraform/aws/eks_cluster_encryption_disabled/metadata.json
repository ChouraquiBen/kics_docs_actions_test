{
  "id": "63ebcb19-2739-4d3f-aa5c-e8bbb9b85281",
  "queryName": "EKS Cluster Encryption Disabled",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "EKS Cluster should be encrypted",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster#encryption_config",
  "platform": "Terraform",
  "descriptionID": "0a928b22",
  "cloudProvider": "aws",
  "cwe": "311",
  "detailedDescriptionText": "AWS EKS clusters should always be configured with encryption to protect sensitive data stored in Kubernetes secrets. This vulnerability occurs when an EKS cluster is created without the 'encryption_config' block, leaving secret data unencrypted at rest.\n\nKubernetes secrets in EKS clusters often contain highly sensitive information such as API keys, passwords, certificates, and other credentials that applications need to function. When encryption is not enabled, these secrets are stored in etcd in plaintext or with only basic encoding (Base64), making them vulnerable to unauthorized access if the etcd storage or backups are compromised.\n\nTo properly secure your EKS cluster, always include the 'encryption_config' block in your Terraform configuration, specifying 'secrets' in the 'resources' array and providing a valid KMS key ARN in the 'provider.key_arn' attribute. Using a customer-managed KMS key rather than the default AWS managed key gives you greater control over key rotation, access policies, and provides better auditability through AWS CloudTrail.\n\nImplementing encryption for EKS clusters is not only a security best practice but also essential for meeting various compliance requirements such as GDPR, HIPAA, PCI DSS, and other regulatory standards that mandate the protection of sensitive data. Proper encryption of Kubernetes secrets adds a critical layer of defense to your containerized applications and helps maintain the confidentiality of your sensitive configuration information."
}
