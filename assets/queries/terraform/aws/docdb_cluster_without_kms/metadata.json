{
  "id": "4766d3ea-241c-4ee6-93ff-c380c996bd1a",
  "queryName": "DOCDB Cluster Without KMS",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "AWS DOCDB Cluster should be encrypted with a KMS encryption key",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#kms_key_id",
  "platform": "Terraform",
  "descriptionID": "35efd407",
  "cloudProvider": "aws",
  "cwe": "326",
  "detailedDescriptionText": "AWS DocumentDB clusters should always be encrypted using Customer Master Keys (CMKs) from AWS Key Management Service (KMS) to ensure proper protection of sensitive data. When a DocumentDB cluster is configured without encryption or without a specified KMS key, it creates significant security and compliance risks.\n\nDocumentDB often stores sensitive and business-critical information, and failure to properly encrypt this data could lead to unauthorized access or data exposure if the underlying storage is compromised. Proper encryption with KMS keys provides an additional layer of security and access control over your database through the key policy.\n\nTo properly secure your DocumentDB cluster, always enable encryption by setting 'storage_encrypted' to true and specifying a KMS key ID using the 'kms_key_id' attribute in your Terraform configuration. Using a customer-managed KMS key rather than the default AWS managed key gives you greater control over key rotation, access policies, and provides better auditability through AWS CloudTrail.\n\nImplementing KMS encryption for DocumentDB clusters is not only a security best practice but also essential for meeting various compliance requirements such as GDPR, HIPAA, PCI DSS, and other regulatory standards that mandate the protection of sensitive data. Additionally, using customer-managed keys allows you to implement strict access controls to the encryption keys and provides a clear audit trail of all cryptographic operations related to your DocumentDB data."
}
