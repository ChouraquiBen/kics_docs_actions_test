{
  "id": "d4e5f6g7-h8i9-0jkl-mnop-qrstuvwx1234",
  "queryName": "Cloud KMS Key Ring is anonymously or publicly accessible",
  "severity": "HIGH",
  "category": "Encryption",
  "descriptionText": "Cloud KMS Key Rings must not be publicly accessible. Public principals like 'allUsers' or 'allAuthenticatedUsers' should not be assigned in IAM member or binding configurations for key rings.",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/kms_key_ring",
  "platform": "Terraform",
  "descriptionID": "d4e5f6g7",
  "cloudProvider": "gcp",
  "cwe": "311",
  "detailedDescriptionText": "## What is the vulnerability?\n\nThis vulnerability occurs when Google Cloud KMS Key Rings are configured with public access by granting IAM permissions to public principals such as 'allUsers' or 'allAuthenticatedUsers'. This creates an extremely serious security vulnerability by exposing cryptographic key management resources to anyone on the internet or anyone with a Google account.\n\n## Why is it risky?\n\n- **Cryptographic Material Compromise**: Public access to key rings could lead to unauthorized management of cryptographic keys, potentially compromising all data protected by those keys.\n- **Key Rotation Tampering**: Attackers could modify key rotation policies, affecting the security lifecycle of cryptographic keys.\n- **Privilege Escalation**: Access to KMS resources could be used as a stepping stone for further privilege escalation within your GCP environment.\n- **Regulatory Violations**: Public access to cryptographic key management resources likely violates multiple compliance standards including PCI-DSS, HIPAA, SOC2, and others.\n- **Data Protection Breach**: Since KMS keys are used to protect sensitive data, compromising them effectively compromises all downstream protected data.\n- **Identity and Access Bypass**: Attackers could create or modify IAM policies associated with KMS resources to further escalate privileges.\n\n## Example of vulnerable configuration\n```terraform\n# IAM Member violation\nresource \"google_kms_key_ring_iam_member\" \"bad_example_member\" {\n  key_ring_id = \"example-key-ring\"\n  member      = \"allUsers\" # ❌ Public principal\n  role        = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n}\n\n# IAM Binding violation\nresource \"google_kms_key_ring_iam_binding\" \"bad_example_binding\" {\n  key_ring_id = \"example-key-ring\"\n  members     = [\"allAuthenticatedUsers\", \"user:someone@example.com\"] # ❌ Contains public principal\n  role        = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n}\n```\n\n## Example of secure configuration\n```terraform\n# IAM Member compliant\nresource \"google_kms_key_ring_iam_member\" \"good_example_member\" {\n  key_ring_id = \"example-key-ring\"\n  member      = \"user:someone@example.com\" # ✅ Non-public principal\n  role        = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n}\n\n# IAM Binding compliant\nresource \"google_kms_key_ring_iam_binding\" \"good_example_binding\" {\n  key_ring_id = \"example-key-ring\"\n  members     = [\"user:someone@example.com\", \"group:admins@example.com\"] # ✅ No public principals\n  role        = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n}\n```\n\n## Mitigation strategies\n\n1. **Eliminate Public Access**: Remove any 'allUsers' or 'allAuthenticatedUsers' principals from KMS key ring IAM policies immediately.\n2. **Use Specific Identities**: Grant access only to specific users, service accounts, or groups that absolutely require it for operational purposes.\n3. **Implement Least Privilege**: Even for authorized users, grant the minimum necessary permissions needed for their role (e.g., separate encrypter and decrypter roles when possible).\n4. **Implement Separation of Duties**: Ensure that permissions to manage key rings are separate from permissions to use the keys.\n5. **Enable Audit Logging**: Set up comprehensive audit logging to monitor all access and operations performed on KMS resources.\n6. **Implement VPC Service Controls**: Use VPC Service Controls to create additional security boundaries around your KMS resources.\n7. **Implement Key Rotation**: Configure automatic key rotation to limit the impact of any potential key compromise.\n8. **Use HSM Protection**: For highly sensitive keys, consider using Cloud HSM protection level for hardware security.\n9. **Regular Access Reviews**: Conduct regular reviews of who has access to your KMS resources and revoke unnecessary permissions.\n10. **Monitoring and Alerting**: Implement monitoring and alerting for any suspicious activity related to your KMS resources."
}
