{
  "id": "a7b8c9d0-e1f2-3a4b-5c6d-7e8f90123456",
  "queryName": "Artifact Registry Repo Is Public",
  "severity": "HIGH",
  "category": "Access Control",
  "descriptionText": "Artifact Registry repositories must not be publicly accessible. IAM members or bindings should not use public principals such as 'allUsers' or 'allAuthenticatedUsers'.",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/artifact_registry_repository_iam_member",
  "platform": "Terraform",
  "descriptionID": "a7b8c9d0",
  "cloudProvider": "gcp",
  "cwe": "284",
  "detailedDescriptionText": "## What is the vulnerability?\n\nThis vulnerability occurs when Google Cloud Artifact Registry repositories are made publicly accessible by granting permissions to public principals like 'allUsers' or 'allAuthenticatedUsers'. Making Artifact Registry repositories public exposes your artifacts to anyone on the internet, which can lead to unauthorized access to your software artifacts, including container images, packages, and binaries.\n\n## Why is it risky?\n\n- **Data Exposure**: Public repositories expose your artifacts to anyone on the internet, potentially leaking proprietary code or sensitive dependencies.\n- **Supply Chain Security**: Public access increases the risk of artifact tampering or unauthorized modifications, compromising your software supply chain.\n- **IP Theft**: Proprietary software or internal libraries could be downloaded by unauthorized parties.\n- **Excessive Access**: 'allUsers' grants access to anyone, while 'allAuthenticatedUsers' grants access to any authenticated Google account, both of which are typically too permissive.\n\n## Example of vulnerable configuration\n```terraform\n# IAM Member violation\nresource \"google_artifact_registry_repository_iam_member\" \"bad_example_member\" {\n  repository = \"example-repo\"\n  member     = \"allUsers\" # ❌ Public principal\n  role       = \"roles/artifactregistry.reader\"\n}\n\n# IAM Binding violation\nresource \"google_artifact_registry_repository_iam_binding\" \"bad_example_binding\" {\n  repository = \"example-repo\"\n  members    = [\"allAuthenticatedUsers\", \"user:someone@example.com\"] # ❌ Contains public principal\n  role       = \"roles/artifactregistry.admin\"\n}\n```\n\n## Example of secure configuration\n```terraform\n# IAM Member compliant\nresource \"google_artifact_registry_repository_iam_member\" \"good_example_member\" {\n  repository = \"example-repo\"\n  member     = \"user:someone@example.com\" # ✅ Non-public principal\n  role       = \"roles/artifactregistry.reader\"\n}\n\n# IAM Binding compliant\nresource \"google_artifact_registry_repository_iam_binding\" \"good_example_binding\" {\n  repository = \"example-repo\"\n  members    = [\"user:someone@example.com\", \"group:admins@example.com\"] # ✅ No public principals\n  role       = \"roles/artifactregistry.admin\"\n}\n```\n\n## Mitigation strategies\n\n1. **Avoid Public Principals**: Never use 'allUsers' or 'allAuthenticatedUsers' principals for Artifact Registry repositories.\n2. **Use Specific Identities**: Grant permissions only to specific users, service accounts, or groups that need access.\n3. **Implement Least Privilege**: Even for authorized users, grant only the minimum necessary permissions (e.g., prefer reader over writer or admin roles when possible).\n4. **Use VPC Service Controls**: Consider implementing VPC Service Controls to restrict access to your Artifact Registry even further.\n5. **Audit Access Regularly**: Regularly review who has access to your repositories and revoke unnecessary permissions.\n6. **Consider Private Repositories**: For sensitive artifacts, use private repositories with strict access controls."
}
