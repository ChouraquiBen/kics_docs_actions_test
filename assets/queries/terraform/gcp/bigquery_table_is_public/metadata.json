{
  "id": "a9b8c7d6-e5f4-3210-abcd-1234567890ab",
  "queryName": "BigQuery Table Is Public",
  "severity": "HIGH",
  "category": "Insecure Configurations",
  "descriptionText": "BigQuery tables must not be publicly accessible. Public principals like 'allUsers' or 'allAuthenticatedUsers' should not be assigned as IAM members or bindings, as this may expose sensitive data.",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_table_iam_member",
  "platform": "Terraform",
  "descriptionID": "a9b8c7d6",
  "cloudProvider": "gcp",
  "cwe": "284",
  "detailedDescriptionText": "## What is the vulnerability?\n\nThis vulnerability occurs when Google BigQuery tables are made publicly accessible by granting IAM permissions to public principals such as 'allUsers' or 'allAuthenticatedUsers'. This creates a serious security risk by exposing potentially sensitive data to anyone on the internet or anyone with a Google account.\n\n## Why is it risky?\n\n- **Data Exposure**: Public tables expose sensitive or proprietary data to anyone on the internet.\n- **Data Exfiltration**: Malicious actors can extract large volumes of data without authorization.\n- **Business Intelligence Leakage**: Competitors may gain insights from your analytics data.\n- **Regulatory Violations**: Public access may violate regulations such as GDPR, HIPAA, PCI-DSS, etc., if the tables contain regulated data.\n- **Privacy Breaches**: Customer or user data could be accessed, leading to privacy violations and potential legal issues.\n- **Intellectual Property Theft**: Proprietary algorithms or business logic embedded in views could be reverse-engineered.\n\n## Example of vulnerable configuration\n```terraform\n# IAM Member violation\nresource \"google_bigquery_table_iam_member\" \"bad_example_member\" {\n  table  = \"example_table\"\n  member = \"allUsers\" # ❌ Public principal\n  role   = \"roles/bigquery.dataViewer\"\n}\n\n# IAM Binding violation\nresource \"google_bigquery_table_iam_binding\" \"bad_example_binding\" {\n  table   = \"example_table\"\n  members = [\"allAuthenticatedUsers\", \"user:someone@example.com\"] # ❌ Contains public principal\n  role    = \"roles/bigquery.dataViewer\"\n}\n```\n\n## Example of secure configuration\n```terraform\n# IAM Member compliant\nresource \"google_bigquery_table_iam_member\" \"good_example_member\" {\n  table  = \"example_table\"\n  member = \"user:someone@example.com\" # ✅ Non-public principal\n  role   = \"roles/bigquery.dataViewer\"\n}\n\n# IAM Binding compliant\nresource \"google_bigquery_table_iam_binding\" \"good_example_binding\" {\n  table   = \"example_table\"\n  members = [\"user:someone@example.com\", \"group:admins@example.com\"] # ✅ No public principals\n  role    = \"roles/bigquery.dataViewer\"\n}\n```\n\n## Mitigation strategies\n\n1. **Eliminate Public Access**: Remove any 'allUsers' or 'allAuthenticatedUsers' principals from BigQuery table IAM policies.\n2. **Use Specific Identities**: Grant access only to specific users, service accounts, or groups that require it.\n3. **Implement Least Privilege**: Even for authorized users, grant only the minimum necessary permissions (e.g., prefer viewer over editor roles when possible).\n4. **Use Domain Restrictions**: If broader access is needed, restrict to specific domains rather than all authenticated users.\n5. **Implement VPC Service Controls**: Consider using VPC Service Controls to add an additional layer of security around your BigQuery resources.\n6. **Enable Audit Logging**: Set up comprehensive audit logging to monitor access to your BigQuery tables.\n7. **Implement Column-Level Security**: For tables that need broader access, use column-level security to restrict access to sensitive columns.\n8. **Utilize Authorized Views**: Create authorized views that limit access to specific subsets of data rather than granting access to entire tables.\n9. **Consider Data Masking**: For data that must be more broadly accessible, implement data masking to protect sensitive information."
}
