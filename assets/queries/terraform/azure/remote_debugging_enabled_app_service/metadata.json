{
  "id": "e3f7a9b0-c1d2-3e4f-5678-90abcdef1234",
  "queryName": "Ensure web app is not remotely debuggable",
  "severity": "HIGH",
  "category": "Insecure Configurations",
  "descriptionText": "Remote debugging in web apps can expose sensitive information and allow unauthorized access. It should be disabled to reduce the attack surface.",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#site_config",
  "platform": "Terraform",
  "descriptionID": "e3f7a9b0",
  "cloudProvider": "azure",
  "cwe": "285",
  "detailedDescriptionText": "Enabling remote debugging in Azure App Services creates a serious security vulnerability by exposing detailed application information and execution flow to potential attackers. Remote debugging should only be enabled temporarily during the development phase and must be strictly disabled in production environments. When left enabled, it can expose application secrets, connection strings, and code logic, providing attackers with valuable information to exploit vulnerabilities.\n\nVulnerable examples:\n```terraform\n# Azure App Service with remote debugging enabled\nresource \"azurerm_app_service\" \"vulnerable\" {\n  name                = \"bad-app-service\"\n  location            = \"East US\"\n  resource_group_name = \"example-rg\"\n  app_service_plan_id = \"example-plan-id\"\n\n  site_config {\n    remote_debugging_enabled = [true]  # Vulnerability: Remote debugging enabled\n    min_tls_version          = [\"1.2\"]\n  }\n}\n\n# Azure Linux Web App with remote debugging enabled\nresource \"azurerm_linux_web_app\" \"vulnerable\" {\n  name                = \"bad-linux-web-app\"\n  location            = \"East US\"\n  resource_group_name = \"example-rg\"\n  service_plan_id     = \"example-plan-id\"\n\n  site_config {\n    minimum_tls_version      = [\"1.2\"]\n    remote_debugging_enabled = [true]  # Vulnerability: Remote debugging enabled\n  }\n}\n```\n\nSecure examples:\n```terraform\n# Azure App Service with remote debugging properly disabled\nresource \"azurerm_app_service\" \"secure\" {\n  name                = \"good-app-service\"\n  location            = \"East US\"\n  resource_group_name = \"example-rg\"\n  app_service_plan_id = \"example-plan-id\"\n\n  site_config {\n    remote_debugging_enabled = [false]  # Secure: Remote debugging disabled\n    min_tls_version          = [\"1.2\"]\n  }\n}\n\n# Azure Linux Web App with remote debugging disabled (by default)\nresource \"azurerm_linux_web_app\" \"secure\" {\n  name                = \"good-linux-web-app\"\n  location            = \"East US\"\n  resource_group_name = \"example-rg\"\n  service_plan_id     = \"example-plan-id\"\n\n  site_config {\n    minimum_tls_version = [\"1.2\"]\n    # remote_debugging_enabled not specified (defaults to false)\n  }\n}\n```\n\nMitigation strategies:\n1. Always explicitly set remote_debugging_enabled to [false] in production environments\n2. Implement a CI/CD pipeline check to ensure remote debugging is disabled before deployment\n3. Use Azure Policy to audit and enforce that remote debugging is disabled\n4. Implement proper application logging instead of relying on remote debugging\n5. If debugging is necessary in production, enable it temporarily with strict time limits\n6. Restrict access to the App Service using Network Security Groups and Private Endpoints\n7. Enable Web Application Firewall (WAF) for additional protection\n8. Regularly audit app service configurations for security best practices\n9. Use Azure DevOps or similar tools for structured debugging in development environments\n10. Implement proper application monitoring and error tracking solutions like Application Insights"
}
