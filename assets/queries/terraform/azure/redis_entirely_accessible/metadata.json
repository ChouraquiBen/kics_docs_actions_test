{
  "id": "fd8da341-6760-4450-b26c-9f6d8850575e",
  "queryName": "Redis Entirely Accessible",
  "severity": "CRITICAL",
  "category": "Networking and Firewall",
  "descriptionText": "Firewall rule allowing unrestricted access to Redis from the Internet",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/redis_firewall_rule",
  "platform": "Terraform",
  "descriptionID": "d18de348",
  "cloudProvider": "azure",
  "cwe": "668",
  "oldSeverity": "HIGH",
  "detailedDescriptionText": "Configuring an Azure Redis Cache with a firewall rule that uses 0.0.0.0 as both the start and end IP address creates an extreme security vulnerability. This configuration effectively disables the firewall protection and allows unrestricted access to your Redis instance from anywhere on the internet. Redis is an in-memory data structure store frequently used to store sensitive application data, authentication tokens, or session information, making it a high-value target for attackers.\n\nVulnerable example:\n```terraform\n# Redis cache with a firewall rule allowing access from anywhere on the internet\nresource \"azurerm_redis_cache\" \"vulnerable\" {\n  name                = \"redis-cache-example\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  capacity            = 1\n  family              = \"P\"\n  sku_name            = \"Premium\"\n  enable_non_ssl_port = false\n\n  redis_configuration {\n    maxclients         = 256\n    maxmemory_reserved = 2\n    maxmemory_delta    = 2\n    maxmemory_policy   = \"allkeys-lru\"\n  }\n}\n\nresource \"azurerm_redis_firewall_rule\" \"vulnerable\" {\n  name                = \"AllowEveryone\"\n  redis_cache_name    = azurerm_redis_cache.example.name\n  resource_group_name = azurerm_resource_group.example.name\n  start_ip            = \"0.0.0.0\"     # Vulnerability: Allows access from any IP address\n  end_ip              = \"0.0.0.0\"     # Vulnerability: Allows access from any IP address\n}\n```\n\nSecure example:\n```terraform\n# Redis cache with a firewall rule allowing access only from internal IP ranges\nresource \"azurerm_redis_cache\" \"secure\" {\n  name                = \"redis-cache-example\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  capacity            = 1\n  family              = \"P\"\n  sku_name            = \"Premium\"\n  enable_non_ssl_port = false\n\n  redis_configuration {\n    maxclients         = 256\n    maxmemory_reserved = 2\n    maxmemory_delta    = 2\n    maxmemory_policy   = \"allkeys-lru\"\n  }\n}\n\nresource \"azurerm_redis_firewall_rule\" \"secure\" {\n  name                = \"InternalAccess\"\n  redis_cache_name    = azurerm_redis_cache.example.name\n  resource_group_name = azurerm_resource_group.example.name\n  start_ip            = \"10.2.3.4\"    # Secure: Internal IP address range\n  end_ip              = \"10.3.4.5\"    # Secure: Internal IP address range\n}\n```\n\nMitigation strategies:\n1. Never use 0.0.0.0 in Redis firewall rules, as it allows unrestricted access\n2. Restrict Redis access to trusted private IP ranges only (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)\n3. Implement Azure Private Link for Redis to create private endpoints within your VNet\n4. If external access is required, restrict to the minimum set of specifically needed IP addresses\n5. Use Azure Virtual Network service endpoints to secure Redis access to specific subnets\n6. Implement multiple layers of protection with Network Security Groups\n7. Always disable non-SSL ports (set enable_non_ssl_port to false) to ensure encrypted communications\n8. Configure Redis AUTH with strong passwords or better yet, use Azure AD authentication\n9. Regularly monitor Redis access logs for unauthorized access attempts\n10. Use Azure Security Center to detect and alert on suspicious Redis access patterns"
}