{
  "id": "5089d055-53ff-421b-9482-a5267bdce629",
  "queryName": "Redis Publicly Accessible",
  "severity": "CRITICAL",
  "category": "Networking and Firewall",
  "descriptionText": "Firewall rule allowing unrestricted access to Redis from other Azure sources",
  "descriptionUrl": "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/redis_firewall_rule",
  "platform": "Terraform",
  "descriptionID": "0017c1c6",
  "cloudProvider": "azure",
  "cwe": "285",
  "oldSeverity": "HIGH",
  "detailedDescriptionText": "Azure Redis Cache instances with public IP access allowed present a critical security vulnerability. When Redis firewall rules permit access from public IP addresses (particularly from non-Azure sources), it drastically increases the risk of unauthorized access, data breaches, and potential Redis exploitation. Redis is a high-performance in-memory data store often containing sensitive application data, session information, or caching critical business logic - making it an attractive target for attackers.\n\nVulnerable example:\n```terraform\n# Redis cache with a firewall rule allowing access from public IP ranges\nresource \"azurerm_redis_cache\" \"vulnerable\" {\n  name                = \"redis-cache-example\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  capacity            = 1\n  family              = \"P\"\n  sku_name            = \"Premium\"\n  enable_non_ssl_port = false\n\n  redis_configuration {\n    maxclients         = 256\n    maxmemory_reserved = 2\n    maxmemory_delta    = 2\n    maxmemory_policy   = \"allkeys-lru\"\n  }\n}\n\nresource \"azurerm_redis_firewall_rule\" \"vulnerable\" {\n  name                = \"PublicAccess\"\n  redis_cache_name    = azurerm_redis_cache.example.name\n  resource_group_name = azurerm_resource_group.example.name\n  start_ip            = \"1.2.3.4\"     # Vulnerability: Public IP address range\n  end_ip              = \"2.3.4.5\"     # Vulnerability: Public IP address range\n}\n```\n\nSecure example:\n```terraform\n# Redis cache with a firewall rule allowing access only from internal IP ranges\nresource \"azurerm_redis_cache\" \"secure\" {\n  name                = \"redis-cache-example\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  capacity            = 1\n  family              = \"P\"\n  sku_name            = \"Premium\"\n  enable_non_ssl_port = false\n\n  redis_configuration {\n    maxclients         = 256\n    maxmemory_reserved = 2\n    maxmemory_delta    = 2\n    maxmemory_policy   = \"allkeys-lru\"\n  }\n}\n\nresource \"azurerm_redis_firewall_rule\" \"secure\" {\n  name                = \"InternalAccess\"\n  redis_cache_name    = azurerm_redis_cache.example.name\n  resource_group_name = azurerm_resource_group.example.name\n  start_ip            = \"10.2.3.4\"    # Secure: Private/internal IP address range\n  end_ip              = \"10.3.4.5\"    # Secure: Private/internal IP address range\n}\n```\n\nMitigation strategies:\n1. Restrict Redis access to trusted internal networks using private IP ranges (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)\n2. Use Azure Private Link for Redis to create private endpoints within your VNet\n3. Avoid configuring Redis firewall rules with public IP addresses when possible\n4. If external access is required, restrict to the minimum set of known, static IP addresses\n5. Implement additional network security groups to control traffic to Redis endpoints\n6. Always disable non-SSL ports (set enable_non_ssl_port to false) to ensure encrypted communications\n7. Use strong authentication mechanisms with Redis AUTH\n8. Regularly rotate Redis access keys\n9. Implement network monitoring and anomaly detection for Redis access patterns\n10. Consider using Azure VPN Gateway or ExpressRoute for secure external connectivity"
}